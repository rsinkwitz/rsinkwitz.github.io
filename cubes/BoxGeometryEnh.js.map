{"version":3,"file":"BoxGeometryEnh.js","sourceRoot":"","sources":["../src/BoxGeometryEnh.ts"],"names":[],"mappings":"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","sourcesContent":["import * as THREE from 'three';\n\nimport { BufferGeometry } from 'three/src/core/BufferGeometry.js';\nimport { Float32BufferAttribute } from 'three/src/core/BufferAttribute.js';\nimport { Vector3 } from 'three/src/math/Vector3.js';\n\nexport class BoxGeometryEnh extends BufferGeometry {\n\ttype: string;\n\tparameters: { width: number; height: number; depth: number; widthSegments: number; heightSegments: number; depthSegments: number; diagFocus: number; faceTwoMat: boolean};\n\n\tconstructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1, diagFocus = 0, faceTwoMat = false) {\n\n\t\tsuper();\n\n\t\tthis.type = 'BoxGeometryEnh';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments,\n\t\t\tdiagFocus: diagFocus,\n\t\t\tfaceTwoMat: faceTwoMat\n\t\t};\n\n\t\tconst scope = this;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\t\tdepthSegments = Math.floor( depthSegments );\n\n\t\t// buffers\n\n\t\tconst indices: number[]  = [];\n\t\tconst vertices: number[] = [];\n\t\tconst normals: number[] = [];\n\t\tconst uvs: number[] = [];\n\n\t\t// helper variables\n\n\t\tlet numberOfVertices = 0;\n\t\tlet groupStart = 0;\n\n\t\t// cubes with special diagonal focus towards two corners\n\t\tconst diagFocusLists = [\n\t\t\t//  red, orange, white, yellow, green, blue\n\t\t\t[false,false,false,false,false,false],  // all other cubes\n\t\t\t[true, false,true, false,false,true ],\t// cube 0, 26\n\t\t\t[false,true, true, false,true, false],  // cube 6, 20\n\t\t\t[false,true, false,true, false,true ],  // cube 8, 18\n\t\t\t[true, false,false,true, true, false]   // cube 2, 24\n\t\t];\n\t\tconst diagSwaps = diagFocusLists[diagFocus];\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', -1, -1, depth, height,  width, depthSegments, heightSegments, diagSwaps[0], 0 ); // px, red\n\t\tbuildPlane( 'z', 'y', 'x',  1, -1, depth, height, -width, depthSegments, heightSegments, diagSwaps[1], 1 ); // nx, orange\n\t\tbuildPlane( 'x', 'z', 'y',  1,  1, width, depth,  height, widthSegments,  depthSegments, diagSwaps[2], 2 ); // py, white\n\t\tbuildPlane( 'x', 'z', 'y',  1, -1, width, depth, -height, widthSegments,  depthSegments, diagSwaps[3], 3 ); // ny, yellow\n\t\tbuildPlane( 'x', 'y', 'z',  1, -1, width, height,  depth, widthSegments, heightSegments, diagSwaps[4], 4 ); // pz, green\n\t\tbuildPlane( 'x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, diagSwaps[5], 5 ); // nz, blue\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction setVectorField(v: Vector3, prop: string, value: number) {\n\t\t\tif (prop === 'x') {\n\t\t\t\tv.setX(value);\n\t\t\t} else if (prop === 'y') {\n\t\t\t\tv.setY(value);\n\t\t\t} else {\n\t\t\t\tv.setZ(value);\n\t\t\t}\n\t\t}\n\n\t\tfunction buildPlane( u: string, v: string, w: string, udir: number, vdir: number, \n\t\t\twidth: number, height: number, depth: number, gridX: number, gridY: number, otherDiagonal: boolean, materialIndex: number) {\n\n\t\t\tconst segmentWidth = width / gridX;\n\t\t\tconst segmentHeight = height / gridY;\n\n\t\t\tconst widthHalf = width / 2;\n\t\t\tconst heightHalf = height / 2;\n\t\t\tconst depthHalf = depth / 2;\n\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\n\t\t\tlet vertexCounter = 0;\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tconst x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tsetVectorField(vector, u, x * udir);\n\t\t\t\t\tsetVectorField(vector, v, y * vdir);\n\t\t\t\t\tsetVectorField(vector, w, depthHalf);\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tsetVectorField(vector, u, 0);\n\t\t\t\t\tsetVectorField(vector, v, 0);\n\t\t\t\t\tsetVectorField(vector, w, depth > 0 ? 1 : - 1);\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 2;\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\tvar matFactor = faceTwoMat ? 2 : 1; // if faceTwoMat is true, we will have two materials for each face\n\t\t\tvar firstMatUsed = false; // flag to indicate if the first material has been used\n\t\t\tfunction firstGroup() {\n\t\t\t\tif (faceTwoMat && !firstMatUsed) {\n\t\t\t\t\tfirstMatUsed = true;\n\t\t\t\t\tscope.addGroup( groupStart, 3, materialIndex * matFactor + 1 );\n\t\t\t\t\tgroupStart += 3;\n\t\t\t\t\tgroupCount -= 3;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tconst a = numberOfVertices + (ix + gridX1 * iy)*2;\n\t\t\t\t\tconst b = numberOfVertices + (ix + gridX1 * ( iy + 1 ))*2;\n\t\t\t\t\tconst c = numberOfVertices + (( ix + 1 ) + gridX1 * ( iy + 1 ))*2;\n\t\t\t\t\tconst d = numberOfVertices + (( ix + 1 ) + gridX1 * iy)*2;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tif (otherDiagonal) {\n\t\t\t\t\t\tindices.push( a, b, c );\n\t\t\t\t\t\tfirstGroup();\n\t\t\t\t\t\tindices.push( a+1, c+1, d+1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\t\tfirstGroup();\n\t\t\t\t\t\tindices.push( b+1, c+1, d+1 );\n\t\t\t\t\t}\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex * matFactor );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tcopy( source: BoxGeometryEnh ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data: { width: number; height: number; depth: number; widthSegments: number; heightSegments: number; depthSegments: number; }) {\n\n\t\treturn new BoxGeometryEnh( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );\n\n\t}\n\n}\n"]}